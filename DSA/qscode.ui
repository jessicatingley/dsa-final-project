<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>QScode</class>
 <widget class="QDialog" name="QScode">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>563</width>
    <height>849</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>DSA Project: Quick Sort Algorithm Code</string>
  </property>
  <widget class="QLabel" name="label">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>781</width>
     <height>791</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>int list_partition(std::vector&lt;int&gt;&amp; num_list, int start_position, int end_position) 
{
    //index moving during every for loop iteration 
    int pivoting_index = start_position;

    //Current pivot value at every quick_sort_algorithm recursive call
    int current_pivot_value = num_list[end_position];

    //Iterating through num_list from passed start to end position
    for (int i = start_position; i &lt; end_position; i++) 
    {
        //If the current element is less than the current pivot
        if (num_list[i] &lt; current_pivot_value) 
        {   
            //swap values
            std::swap(num_list[i], num_list[pivoting_index]);

            //increment to the next index after swapping
            pivoting_index++;
        }
    }
    
    //Once iterative swapping is completed, swap the pivot and the
    //incrementing pivot index to finsh the sub-array sort
    std::swap(num_list[pivoting_index], num_list[end_position]);
    
    //Returning the pivoting index begin the next portion of sorting
    return pivoting_index;
}
void quick_sort_algorithm(std::vector&lt;int&gt;&amp; num_list, int start_position, int end_position) 
{
    //Check if num_list is sorted
    //if the two positions cross or equal, stop sorting
    if (start_position &gt;= end_position)
        return;

    int index = list_partition(num_list, start_position, end_position);

    //Left partition of list
    quick_sort_algorithm(num_list, start_position, index - 1);

    //Right partition of list
    quick_sort_algorithm(num_list, index + 1, end_position);
}</string>
   </property>
   <property name="indent">
    <number>5</number>
   </property>
  </widget>
  <widget class="QTextBrowser" name="textBrowser">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>820</y>
     <width>561</width>
     <height>31</height>
    </rect>
   </property>
   <property name="html">
    <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: &quot;\2610&quot;; }
li.checked::marker { content: &quot;\2612&quot;; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Segoe UI'; font-size:9pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;https://github.com/jessicatingley/dsa-final-project/blob/main/quick_sort.cpp&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
