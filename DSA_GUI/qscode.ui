<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>QScode</class>
 <widget class="QDialog" name="QScode">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>505</width>
    <height>560</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>DSA Project: Quick Sort Algorithm Code</string>
  </property>
  <widget class="QLabel" name="label">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>0</y>
     <width>500</width>
     <height>560</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <pointsize>10</pointsize>
    </font>
   </property>
   <property name="text">
    <string>int list_partition(std::vector&lt;int&gt;&amp; num_list, int start_position, int end_position) 
{
    //index moving during every for loop iteration 
    int pivoting_index = start_position;

    //Current pivot value at every quick_sort_algorithm recursive call
    int current_pivot_value = num_list[end_position];

    //Iterating through num_list from passed start to end position
    for (int i = start_position; i &lt; end_position; i++) 
    {
        //If the current element is less than the current pivot
        if (num_list[i] &lt; current_pivot_value) 
        {   
            //swap values
            std::swap(num_list[i], num_list[pivoting_index]);

            //increment to the next index after swapping
            pivoting_index++;
        }
    }
    
    //Once iterative swapping is completed, swap the pivot and the
    //incrementing pivot index to finsh the sub-array sort
    std::swap(num_list[pivoting_index], num_list[end_position]);
    
    //Returning the pivoting index begin the next portion of sorting
    return pivoting_index;
}
void quick_sort_algorithm(std::vector&lt;int&gt;&amp; num_list, int start_position, int end_position) 
{
    //Check if num_list is sorted
    //if the two positions cross or equal, stop sorting
    if (start_position &gt;= end_position)
        return;

    int index = list_partition(num_list, start_position, end_position);

    //Left partition of list
    quick_sort_algorithm(num_list, start_position, index - 1);

    //Right partition of list
    quick_sort_algorithm(num_list, index + 1, end_position);
}</string>
   </property>
   <property name="indent">
    <number>5</number>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
